{"version":3,"sources":["QuoteGenerator.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["QuoteGenerator","state","quote","author","allQuotes","handleClick","bind","this","generateQuote","fetch","then","response","json","data","console","log","setState","content","catch","err","event","preventDefault","id","onClick","href","className","Component","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQA0FeA,G,iBApFX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,MAAO,GACPC,OAAQ,GACRC,UAAW,IAEf,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPV,E,iFAcTC,KAAKC,kB,sCAKQ,IAAD,OAEZC,MAAM,kCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVZ,UAAWS,EACXX,MAAOW,EAAKI,QACZd,OAAQU,EAAKV,SAEjBW,QAAQC,IAAI,UAAU,EAAKd,UAG9BiB,OAAM,SAAAC,GAAQL,QAAQC,IAAII,Q,kCAGnBC,GACRN,QAAQC,IAAIR,KAAKN,OACjBmB,EAAMC,iBACNd,KAAKC,kB,+BAQL,OADAM,QAAQC,IAAI,aAAaR,KAAKN,OAE1B,oCACI,yBAAKqB,GAAG,aACJ,yBAAKA,GAAG,cACJ,yBAAKA,GAAG,QACJ,2BACKf,KAAKN,MAAMC,QAIpB,yBAAKoB,GAAG,UACJ,2BACKf,KAAKN,MAAME,UAIxB,yBAAKmB,GAAG,gBACJ,yBAAKA,GAAG,eACJ,6BACI,4BAAQA,GAAG,YAAYC,QAAShB,KAAKF,aAArC,cAEJ,6BACI,uBACImB,KAAM,6CAA6CjB,KAAKN,MAAMC,MAC9DoB,GAAG,cACHG,UAAU,iBAHd,wB,GAtEHC,cCYdC,MAbf,WACI,OACA,yBAAKF,UAAU,mBACX,6BAASA,UAAU,SAEX,kBAAC,EAAD,SCUDG,MAff,WACE,OACE,yBAAKH,UAAU,OACd,6BACG,4BAAQA,UAAU,cACd,gDAKN,kBAAC,EAAD,QCFcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.7cf1ccec.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './App.css'\r\n\r\n//const axios = require('axios')\r\n\r\nclass QuoteGenerator extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            quote: \"\",\r\n            author: \"\",\r\n            allQuotes: []\r\n        }\r\n        this.handleClick = this.handleClick.bind(this)\r\n       \r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this.generateQuote()\r\n            \r\n        \r\n    }\r\n\r\n    generateQuote() {\r\n        \r\n        fetch('https://api.quotable.io/random')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log(data)\r\n            this.setState({\r\n                allQuotes: data,\r\n                quote: data.content,\r\n                author: data.author\r\n            })\r\n            console.log(\"mounted\",this.state)\r\n            \r\n        })\r\n        .catch(err => {console.log(err)})\r\n    }\r\n\r\n    handleClick(event){\r\n        console.log(this.state)\r\n        event.preventDefault()\r\n        this.generateQuote()\r\n    }\r\n\r\n\r\n\r\n\r\n    render(){\r\n        console.log(\"here it is\",this.state)\r\n        return(\r\n            <>\r\n                <div id=\"quote-box\">\r\n                    <div id=\"main-quote\">\r\n                        <div id=\"text\">\r\n                            <p>\r\n                                {this.state.quote}\r\n                                \r\n                            </p>\r\n                        </div>\r\n                        <div id=\"author\">\r\n                            <p>\r\n                                {this.state.author}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"quote-footer\">\r\n                        <div id=\"button-wrap\">\r\n                            <div>\r\n                                <button id=\"new-quote\" onClick={this.handleClick}>New Quote</button>\r\n                            </div>\r\n                            <div>\r\n                                <a \r\n                                    href={\"https://www.twitter.com/intent/tweet?text=\"+this.state.quote} \r\n                                    id=\"tweet-quote\"\r\n                                    className=\"fa fa-twitter\"\r\n                                >Tweet Quote</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default QuoteGenerator","import React from 'react'\r\nimport QuoteGenerator from './QuoteGenerator'\r\nimport './App.css'\r\n\r\nfunction Main(){\r\n    return(\r\n    <div className=\"quote-container\">\r\n        <section className=\"quote\">\r\n            \r\n                <QuoteGenerator />\r\n\r\n            \r\n        </section>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Main","import React from 'react';\r\nimport Main from './Main'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <div>\r\n        <header className=\"App-header\">\r\n            <h1>\r\n                Amazing Quotes\r\n            </h1>\r\n        </header>\r\n    </div>\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}